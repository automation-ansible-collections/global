---
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_inventories.yml"
  when: orgs is defined and dir_orgs_vars is defined

- block:
  - name: Get the current tower inventories
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      inventory: 'all'
    register: current_inventories

  - name: Show the currently existing inventories
    debug:
      var: current_inventories

  - name: Show the inventories not in IaC
    debug:
      msg:
        - "{{ inventory_item.name if inventory_item.name not in (configure_tower_inventories | map(attribute='name') | list) }}"
    loop: "{{ current_inventories.assets.inventory }}"
    loop_control:
      loop_var: inventory_item
    when: (inventory_item.name if inventory_item.name not in (configure_tower_inventories | map(attribute='name') | list))

  - name: Remove the inventories not in IaC
    ansible.controller.tower_inventory:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_inventory_item.name }}"
      organization: "{{ remove_inventory_item.organization.name | default(orgs) }}"
      state: absent
    when: (remove_inventory_item.name if remove_inventory_item.name not in (configure_tower_inventories | map(attribute='name') | list))
    loop: "{{ current_inventories.assets.inventory }}"
    loop_control:
      loop_var: remove_inventory_item
  when:
    - desired_state is defined
    - desired_state | bool

- name: Create tower inventories
  ansible.controller.tower_inventory:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    state: "{{ item.state | default('present') }}"
    organization: "{{ item.organization | default(orgs) }}"
    host_filter: "{{ item.host_filter | default(omit) }}"
    kind: "{{ item.kind | default(omit) }}"
    # variables: "{% if item.variables_file is defined %}{{ lookup('file', dir_orgs_vars + '/' + orgs + '/variables/' + item.variables_file) | from_yaml }} {% else %} {{ omit }} {% endif %}"
    variables: "{{ (lookup('file', dir_orgs_vars + '/' + orgs + '/variables/' + item.variables_file) | from_yaml) if item.variables_file is defined else omit }}"
  loop: "{{ configure_tower_inventories }}"
  when: configure_tower_inventories is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  async: 1000
  poll: 0
  register: inventories1

- name: "Create Tower inventories | Wait for finish the inventories creation"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: inventories1_result
  until: inventories1_result.finished
  retries: 10
  loop: "{{ inventories1.results }}"
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  no_log: true
