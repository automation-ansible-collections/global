---
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_inventory_source.yml"
  when: orgs is defined and dir_orgs_vars is defined

- block:
  - name: Get the current tower inventories_sources
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      inventory_sources: 'all'
    register: current_inventory_sources_for_inventory_sources

  - name: Map the currently existing information
    set_fact:
      current_info_for_inventory_sources: "{{ (current_info_for_inventory_sources | default([])) + [{ 'inventory': inventory_source_item.inventory.name, 'inventory_source': inventory_source_item.name}] }}"
    loop: "{{ current_inventory_sources_for_inventory_sources.assets.inventory_sources }}"
    loop_control:
      loop_var: inventory_source_item
    ignore_errors: true

  - name: Show the currently existing hosts associated with it's inventories
    debug:
      msg:
        - "Current Info: {{ current_info_for_inventory_sources }}"
        - "IaC inventory_sources: {{ configure_tower_inventory_source }}"

  - name: Show the inventory sources not in IaC
    debug:
      msg:
        - "Inventory name: {{ current_info_item_for_inventory_sources.inventory }}"
        - "Inventory Source name: {{ current_info_item_for_inventory_sources.inventory_source }}"
    vars:
      inventory_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_inventory_source, test='match', value=current_info_item_for_inventory_sources.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
      inventory_source_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_inventory_source, test='match', value='^'+current_info_item_for_inventory_sources.inventory_source+'$', key='name', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_inventory_sources }}"
    loop_control:
      loop_var: current_info_item_for_inventory_sources
    when: (inventory_source_index | intersect(inventory_index)) == []

  - name: Remove the hosts not in IaC
    ansible.controller.tower_inventory_source:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_inventory_sources_item.inventory_source }}"
      inventory: "{{ remove_inventory_sources_item.inventory }}"
      state: absent
    vars:
      inventory_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_inventory_source, test='match', value=remove_inventory_sources_item.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
      inventory_source_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_inventory_source, test='match', value='^'+remove_inventory_sources_item.inventory_source+'$', key='name', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_inventory_sources }}"
    loop_control:
      loop_var: remove_inventory_sources_item
    when: (inventory_source_index | intersect(inventory_index)) == []
  when:
    - desired_state is defined
    - desired_state | bool

- name: Create tower inventory source
  ansible.controller.tower_inventory_source:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    state: "{{ item.state | default('present') }}"
    name: "{{ item.name }}"
    custom_virtualenv: "{{ item.custom_virtualenv | default(omit) }}"
    source: "{{ item.source }}"
    inventory: "{{ item.inventory }}"
    description: "{{ item.description | default(omit) }}"
    credential: "{{ item.credential | default(omit) }}"
    group_by: "{{ item.group_by | default(omit) }}"
    instance_filters: "{{  item.instance_filters | default(omit) }}"
    overwrite: "{{ item.overwrite | default(omit) }}"
    overwrite_vars: "{{ item.overwrite_vars | default(omit) }}"
    source_path: "{{ item.source_path | default(omit) }}"
    source_project: "{{ item.source_project | default(omit) }}"
    source_regions: "{{ item.source_regions | default(omit) }}"
    source_script: "{{ item.source_script | default(omit) }}"
    source_vars: "{{ item.source_vars | default(omit) }}"
    timeout: "{{ item.timeout | default(omit) }}"
    update_cache_timeout: "{{ item.update_cache_timeout | default(omit) }}"
    update_on_project_update: "{{ item.update_on_project_update | default(omit) }}"
    update_on_launch: "{{ update_on_launch | default('true')}}"
    source_vars: "{{ source_vars | default(omit) }}"
  loop: "{{ configure_tower_inventory_source }}"
  when: configure_tower_inventory_source is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
