---
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_hosts.yml"
  when: orgs is defined and dir_orgs_vars is defined

- block:
  - name: Get the current tower inventories
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      inventory: 'all'
    register: current_inventories_for_hosts

  - name: Map the currently existing information
    set_fact:
      current_info_for_hosts: "{{ (current_info_for_hosts | default([])) + [{ 'inventory': inventory_item.name, 'hosts': (inventory_item.related.hosts | map(attribute='name') | list) }] }}"
    loop: "{{ current_inventories_for_hosts.assets.inventory }}"
    loop_control:
      loop_var: inventory_item

  - name: Show the currently existing hosts associated with it's inventories
    debug:
      msg:
        - "Current Info: {{ current_info_for_hosts }}"
        - "IaC hosts: {{ configure_tower_hosts }}"

  - name: Show the hosts not in IaC
    debug:
      msg:
        - "Inventory name: {{ current_info_item_for_hosts.0.inventory }}"
        - "Host name: {{ current_info_item_for_hosts.1 }}"
    vars:
      inventory_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_hosts, test='match', value=current_info_item_for_hosts.0.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
      host_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_hosts, test='match', value=current_info_item_for_hosts.1, key='name', fail_on_missing='true', wantlist=True) }}"
    with_subelements:
      - "{{ current_info_for_hosts }}"
      - hosts
    loop_control:
      loop_var: current_info_item_for_hosts
    when: (host_index | intersect(inventory_index)) == []

  - name: Remove the hosts not in IaC
    ansible.controller.tower_host:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_host_item.1 }}"
      inventory: "{{ remove_host_item.0.inventory }}"
      state: absent
    vars:
      inventory_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_hosts, test='match', value=remove_host_item.0.inventory, key='inventory', fail_on_missing='true', wantlist=True) }}"
      host_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_hosts, test='match', value=remove_host_item.1, key='name', fail_on_missing='true', wantlist=True) }}"
    with_subelements:
      - "{{ current_info_for_hosts }}"
      - hosts
    loop_control:
      loop_var: remove_host_item
    when: (host_index | intersect(inventory_index)) == []
  when:
    - desired_state is defined
    - desired_state | bool

- name: Create tower hosts
  ansible.controller.tower_host:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    inventory: "{{ item.inventory }}"
    state: "{{ item.state | default('present') }}"
    variables: "{{ lookup('file', dir_orgs_vars + '/' + orgs + '/variables/' + item.variables_file) if item.variables_file is defined else omit }}"
  loop: "{{ configure_tower_hosts }}"
  when: configure_tower_hosts is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
