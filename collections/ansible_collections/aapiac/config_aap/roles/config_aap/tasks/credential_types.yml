---
# tasks file for configure_tower_credential_types
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
  when: dir_orgs_vars is defined

- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_credential_types.yml"
  when:
    - orgs is defined
    - dir_orgs_vars is defined
    - configure_tower_credential_types is not defined

- block:
  - name: Get the current tower credential types
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      credential_types: 'all'
    register: current_credential_types

  - name: Show the currently existing credential types
    debug:
      var: current_credential_types

  - name: Show the credential types not in IaC
    debug:
      msg:
        - "{{ credential_type_item.name if credential_type_item.name not in (configure_tower_credential_types | map(attribute='name') | list) }}"
    when: (credential_type_item.name if credential_type_item.name not in (configure_tower_credential_types | map(attribute='name') | list))
    loop: "{{ current_credential_types.assets.credential_types }}"
    loop_control:
      loop_var: credential_type_item

  - name: Remove the credential types not in IaC
    ansible.controller.tower_credential_type:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_credential_type_item.name }}"
      description: "{{ remove_credential_type_item.description }}"
      state: absent
    when: (remove_credential_type_item.name if remove_credential_type_item.name not in (configure_tower_credential_types | map(attribute='name') | list))
    loop: "{{ current_credential_types.assets.credential_types }}"
    loop_control:
      loop_var: remove_credential_type_item

  when:
    - desired_state is defined
    - desired_state | bool

- name: "Configure Tower Credential Types | Launch credential types creation"
  ansible.controller.tower_credential_type:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    name: "{{ item.name }}"
    description: "{{ item.description | default (omit) }}"
    kind: "{{ item.kind }}"
    inputs: "{{ item.inputs | default(omit) }}"
    injectors: "{{ item.injectors | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
  loop: "{{ configure_tower_credential_types }}"
  when: configure_tower_credential_types is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  # no_log: true
  async: 1000
  poll: 0
  register: credentialTypes1

- name: "Configure Tower Credential Types | Wait for finish the credential types creation"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: credentialTypes1_result
  until: credentialTypes1_result.finished
  retries: 10
  loop: "{{ credentialTypes1.results }}"
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
...
