---
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_job_templates.yml"
  when: orgs is defined and dir_orgs_vars is defined

- block:
  - name: Get the current tower job templates
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      job_templates: 'all'
    register: current_job_templates

  - debug: var=current_job_templates

  - debug:
      msg: "{{ item.name }} -> {{ item.natural_key.organization.name | default('NO_ORGANIZATION') }}"
    loop: "{{ current_job_templates.assets.job_templates }}"

  - name: Map the currently existing information
    set_fact:
      current_info_for_job_templates: "{{ (current_info_for_job_templates | default([])) + [{ 'job_template': job_template_item.name, 'organization': (job_template_item.natural_key.organization.name | default('NO_ORGANIZATION'))}] }}"
    loop: "{{ current_job_templates.assets.job_templates }}"
    loop_control:
      loop_var: job_template_item
    ignore_errors: true

  - name: Show the currently existing job_templates associated with it's organizations
    debug:
      msg:
        - "Current Info: {{ current_info_for_job_templates }}"
        - "IaC job_templates: {{ configure_tower_job_templates }}"

  - name: Show the job_templates not in IaC
    debug:
      msg:
        - "Project name: {{ current_info_item_for_job_templates.job_template }}"
        - "Project organization name: {{ current_info_item_for_job_templates.organization }}"
    vars:
      job_template_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_job_templates, test='match', value='^'+current_info_item_for_job_templates.job_template+'$', key='name', fail_on_missing='true', wantlist=True) }}"
      job_template_organization_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_job_templates, test='match', value='^'+current_info_item_for_job_templates.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_job_templates }}"
    loop_control:
      loop_var: current_info_item_for_job_templates
    when:
      - current_info_item_for_job_templates.organization is match('^'+orgs+'$')
      - (job_template_organization_index | intersect(job_template_index)) == []

  - name: Remove the job_templates not in IaC
    ansible.controller.tower_job_template:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_job_template_item.job_template }}"
      organization: "{{ remove_job_template_item.organization }}"
      state: absent
    vars:
      job_template_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_job_templates, test='match', value='^'+remove_job_template_item.job_template+'$', key='name', fail_on_missing='true', wantlist=True) }}"
      job_template_organization_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_job_templates, test='match', value='^'+remove_job_template_item.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_job_templates }}"
    loop_control:
      loop_var: remove_job_template_item
    when:
      - remove_job_template_item.organization is match('^'+orgs+'$')
      - (job_template_organization_index | intersect(job_template_index)) == []

  when:
    - desired_state is defined
    - desired_state | bool

- name: Create tower Job Templates
  ansible.controller.tower_job_template:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    name: "{{ item.name }}"
    organization: "{{ item.organization | default(orgs) }}"
    project: "{{ item.project }}"
    playbook: "{{ item.playbook }}"
    job_type: "{{ item.job_type | default('run') }}"
    description: "{{ item.description | default(omit) }}"
    credential: "{{ item.credential | default(omit) }}"
    credentials: "{{ item.credentials | default(omit) }}"
    become_enabled: "{{ item.become_enabled | default('false') }}"
    concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default('false') }}"
    diff_mode_enabled: "{{ item.diff_mode_enabled | default('false') }}"
    extra_vars: "{{ (lookup('file', item.extra_vars_path) | from_yaml) if item.extra_vars_path is defined else {} }}"
    fact_caching_enabled: "{{ item.fact_caching_enabled | default('false') }}"
    force_handlers_enabled: "{{ item.force_handlers_enabled | default('false') }}"
    forks: "{{ item.forks | default(50) }}"
    host_config_key: "{{ item.host_config_key | default(omit) }}"
    inventory: "{{ item.inventory | default(omit) }}"
    job_tags: "{{ item.job_tags | default(omit) }}"
    limit: "{{ item.limit | default(omit) }}"
    skip_tags: "{{ item.skip_tags | default(omit) }}"
    start_at_task: "{{ item.start_at_task | default(omit) }}"
    verbosity: "{{ item.verbosity | default(omit) }}"
    vault_credential: "{{ item.vault_credential | default(omit) }}"
    survey_enabled: "{{ item.survey_enabled | default('false') }}"
    survey_spec: "{{ (lookup('file', item.survey_spec_file) | from_json) if item.survey_spec_file is defined else omit }}"
    ask_scm_branch_on_launch: "{{ item.ask_scm_branch_on_launch | default(omit) }}"
    scm_branch: "{{ item.scm_branch | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  loop: "{{ configure_tower_job_templates }}"
  when: configure_tower_job_templates is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  async: 1000
  poll: 0
  register: jobtemplate1

- name: "Configure Tower Job Templates | Wait for finish the job templates creation"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: jobtemplate1_result
  until: jobtemplate1_result.finished
  retries: 30
  loop: "{{ jobtemplate1.results }}"
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  #no_log: true
...
