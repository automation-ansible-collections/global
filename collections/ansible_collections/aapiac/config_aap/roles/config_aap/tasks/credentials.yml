---
# tasks file for tower_ldap_settings
- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_general.yml"
    - "{{ dir_orgs_vars }}/configure_tower_credentials.yml"
    - "{{ dir_orgs_vars }}/configure_foreman_katello_general.yml"
  when: dir_orgs_vars is defined

- include_vars:
    file: "{{ item }}"
  loop:
    - "{{ dir_orgs_vars }}/configure_tower_organizations.yml"
    - "{{ dir_orgs_vars }}/configure_tower_providers.yml"
    - "{{ dir_orgs_vars }}/{{ orgs }}/configure_tower_credentials.yml"
  when:
    - orgs is defined
    - dir_orgs_vars is defined
    - configure_tower_credentials is not defined

- block:
  - name: Get the current tower credentials
    ansible.controller.tower_export:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      credentials: 'all'
    register: current_credentials

  - name: Show the currently existing credentials
    debug:
      msg: "{{ item.name }} -> {{ item.organization.name | default('NO_ORGANIZATION') }}"
    loop: "{{ current_credentials.assets.credentials }}"

  - name: Map the currently existing information
    set_fact:
      current_info_for_credentials: "{{ (current_info_for_credentials | default([])) + [{ 'credential': credential_item.name, 'credential_type': credential_item.credential_type.name, 'organization': (credential_item.organization.name | default('NO_ORGANIZATION'))}] }}"
    loop: "{{ current_credentials.assets.credentials }}"
    loop_control:
      loop_var: credential_item
    ignore_errors: true

  - name: Show the currently existing credentials associated with it's organizations
    debug:
      msg:
        - "Current credential: {{ current_info_for_credentials }}"
        - "IaC credentials: {{ configure_tower_credentials }}"

  - name: Show the credentials not in IaC
    debug:
      msg:
        - "Credential name: {{ current_info_item_for_credentials.credential }}"
        - "Credential type: {{ current_info_item_for_credentials.credential_type }}"
        - "Credential organization name: {{ current_info_item_for_credentials.organization }}"
    vars:
      credential_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+current_info_item_for_credentials.credential+'$', key='name', fail_on_missing='true', wantlist=True) }}"
      credential_type_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+current_info_item_for_credentials.credential_type+'$', key='credential_type', fail_on_missing='true', wantlist=True) }}"
      credential_organization_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+current_info_item_for_credentials.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_credentials }}"
    loop_control:
      loop_var: current_info_item_for_credentials
    when:
      - current_info_item_for_credentials.organization is match('^'+orgs+'$')
      - ((credential_organization_index | intersect(credential_index)) | intersect(credential_type_index)) == []

  - name: Remove the credentials not in IaC
    ansible.controller.tower_credential:
      tower_username: "{{ configure_tower_username }}"
      tower_password: "{{ configure_tower_password }}"
      tower_host: "{{ configure_tower_server_url }}"
      validate_certs: "{{ configure_tower_validate_certs }}"
      name: "{{ remove_credential_item.credential }}"
      credential_type: "{{ remove_credential_item.credential_type }}"
      organization: "{{ remove_credential_item.organization }}"
      state: absent
    vars:
      credential_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+remove_credential_item.credential+'$', key='name', fail_on_missing='true', wantlist=True) }}"
      credential_type_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+remove_credential_item.credential_type+'$', key='credential_type', fail_on_missing='true', wantlist=True) }}"
      credential_organization_index: "{{ lookup('ansible.utils.index_of', data=configure_tower_credentials, test='match', value='^'+remove_credential_item.organization+'$', key='organization', fail_on_missing='true', wantlist=True) }}"
    loop: "{{ current_info_for_credentials }}"
    loop_control:
      loop_var: remove_credential_item
    when:
      - remove_credential_item.organization is match('^'+orgs+'$')
      - ((credential_organization_index | intersect(credential_index)) | intersect(credential_type_index)) == []

  when:
    - desired_state is defined
    - desired_state | bool

- name: "Configure Tower Credentials | Launch credential creation"
  ansible.controller.tower_credential:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    name: "{{ item.name }}"
    organization: "{{ item.organization | default(orgs) }}"
    description: "{{ item.description | default (omit) }}"
    credential_type: "{{ item.credential_type }}"
    host: "{{ item.host | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    team: "{{ item.team | default(omit) }}"
    user: "{{ item.user | default(omit) }}"
    inputs: "{{ item.inputs | default(omit) }}"
  loop: "{{ configure_tower_credentials }}"
  when: configure_tower_credentials is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  no_log: true
  async: 1000
  poll: 0
  register: credentials1

- name: "Configure Tower Credentials | Wait for finish the credential creation"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: credentials1_result
  until: credentials1_result.finished
  retries: 10
  loop: "{{ credentials1.results }}"
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  no_log: true

- block:
    - name: "Configure Tower Credentials | Launch credential creation: Iteration through ORG and PROVIDER"
      ansible.controller.tower_credential:
        tower_username: "{{ configure_tower_username }}"
        tower_password: "{{ configure_tower_password }}"
        tower_host: "{{ configure_tower_server_url }}"
        validate_certs: "{{ configure_tower_validate_certs }}"
        name: "CR-AL-TO-O-{{ item.0.name.split('-')[4] }}-MCH-{{ item.1.name }}-{{ item.2 }}"
        organization: "{{ item.0.name | default(orgs) }}"
        description: "{{ item.description | default (omit) }}"
        credential_type: "{{ item.credential_type | default('Machine') }}"
        host: "{{ item.host | default(omit) }}"
        state: "{{ item.state | default('present') }}"
        team: "{{ item.team | default(omit) }}"
        user: "{{ item.user | default(omit) }}"
        inputs: "{{ item.inputs | default(omit) }}"
      with_nested:
        - "{{ configure_tower_organizations }}"
        - "{{ configure_tower_providers }}"
        - ['PRO', 'NPR']
      when:
        - configure_tower_organizations is defined
        - configure_tower_providers is defined
      delegate_to: "{{ 'localhost' if tower_local else omit }}"
      no_log: true
      async: 1000
      poll: 0
      register: credentials2

    - name: "Configure Tower Credentials | Wait for finish the credential creation: Iteration through ORG and PROVIDER"
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: credentials2_result
      until: credentials2_result.finished
      retries: 10
      loop: "{{ credentials2.results }}"
      delegate_to: "{{ 'localhost' if tower_local else omit }}"
      no_log: true
  when:
    - skip_empty_creation is not defined
...
